{
  "hash": "1333117f9d102c5bcf135ca287295d83",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Behavioral Outlier Segmentation using credit card dataset \"\nsubtitle: \"Proposal\"\nauthor: \n  - name: \"Team Name - Saumya Gupta, Jeevana Sai Devi Sathwika Karri\"\n    affiliations:\n      - name: \"College of Information Science, University of Arizona\"\ndescription: \"Project description\"\nformat:\n  html:\n    code-tools: true\n    code-overflow: wrap\n    code-line-numbers: true\n    embed-resources: true\neditor: visual\ncode-annotations: hover\nexecute:\n  warning: false\njupyter: python3\n---\n\n::: {#load-pkgs .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\n## Dataset\n\n::: {#load-dataset .cell message='false' execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n\ncredit_card = pd.read_csv(\"data/CC GENERAL.csv\")\n\nprint(credit_card.info())\nprint('')\nprint(\"\\nShape of the dataset:\", credit_card.shape)\nprint('')\nprint(\"\\nData types:\\n\", credit_card.dtypes)\nprint('')\nprint(credit_card.describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 8950 entries, 0 to 8949\nData columns (total 18 columns):\n #   Column                            Non-Null Count  Dtype  \n---  ------                            --------------  -----  \n 0   CUST_ID                           8950 non-null   object \n 1   BALANCE                           8950 non-null   float64\n 2   BALANCE_FREQUENCY                 8950 non-null   float64\n 3   PURCHASES                         8950 non-null   float64\n 4   ONEOFF_PURCHASES                  8950 non-null   float64\n 5   INSTALLMENTS_PURCHASES            8950 non-null   float64\n 6   CASH_ADVANCE                      8950 non-null   float64\n 7   PURCHASES_FREQUENCY               8950 non-null   float64\n 8   ONEOFF_PURCHASES_FREQUENCY        8950 non-null   float64\n 9   PURCHASES_INSTALLMENTS_FREQUENCY  8950 non-null   float64\n 10  CASH_ADVANCE_FREQUENCY            8950 non-null   float64\n 11  CASH_ADVANCE_TRX                  8950 non-null   int64  \n 12  PURCHASES_TRX                     8950 non-null   int64  \n 13  CREDIT_LIMIT                      8949 non-null   float64\n 14  PAYMENTS                          8950 non-null   float64\n 15  MINIMUM_PAYMENTS                  8637 non-null   float64\n 16  PRC_FULL_PAYMENT                  8950 non-null   float64\n 17  TENURE                            8950 non-null   int64  \ndtypes: float64(14), int64(3), object(1)\nmemory usage: 1.2+ MB\nNone\n\n\nShape of the dataset: (8950, 18)\n\n\nData types:\n CUST_ID                              object\nBALANCE                             float64\nBALANCE_FREQUENCY                   float64\nPURCHASES                           float64\nONEOFF_PURCHASES                    float64\nINSTALLMENTS_PURCHASES              float64\nCASH_ADVANCE                        float64\nPURCHASES_FREQUENCY                 float64\nONEOFF_PURCHASES_FREQUENCY          float64\nPURCHASES_INSTALLMENTS_FREQUENCY    float64\nCASH_ADVANCE_FREQUENCY              float64\nCASH_ADVANCE_TRX                      int64\nPURCHASES_TRX                         int64\nCREDIT_LIMIT                        float64\nPAYMENTS                            float64\nMINIMUM_PAYMENTS                    float64\nPRC_FULL_PAYMENT                    float64\nTENURE                                int64\ndtype: object\n\n            BALANCE  BALANCE_FREQUENCY     PURCHASES  ONEOFF_PURCHASES  \\\ncount   8950.000000        8950.000000   8950.000000       8950.000000   \nmean    1564.474828           0.877271   1003.204834        592.437371   \nstd     2081.531879           0.236904   2136.634782       1659.887917   \nmin        0.000000           0.000000      0.000000          0.000000   \n25%      128.281915           0.888889     39.635000          0.000000   \n50%      873.385231           1.000000    361.280000         38.000000   \n75%     2054.140036           1.000000   1110.130000        577.405000   \nmax    19043.138560           1.000000  49039.570000      40761.250000   \n\n       INSTALLMENTS_PURCHASES  CASH_ADVANCE  PURCHASES_FREQUENCY  \\\ncount             8950.000000   8950.000000          8950.000000   \nmean               411.067645    978.871112             0.490351   \nstd                904.338115   2097.163877             0.401371   \nmin                  0.000000      0.000000             0.000000   \n25%                  0.000000      0.000000             0.083333   \n50%                 89.000000      0.000000             0.500000   \n75%                468.637500   1113.821139             0.916667   \nmax              22500.000000  47137.211760             1.000000   \n\n       ONEOFF_PURCHASES_FREQUENCY  PURCHASES_INSTALLMENTS_FREQUENCY  \\\ncount                 8950.000000                       8950.000000   \nmean                     0.202458                          0.364437   \nstd                      0.298336                          0.397448   \nmin                      0.000000                          0.000000   \n25%                      0.000000                          0.000000   \n50%                      0.083333                          0.166667   \n75%                      0.300000                          0.750000   \nmax                      1.000000                          1.000000   \n\n       CASH_ADVANCE_FREQUENCY  CASH_ADVANCE_TRX  PURCHASES_TRX  CREDIT_LIMIT  \\\ncount             8950.000000       8950.000000    8950.000000   8949.000000   \nmean                 0.135144          3.248827      14.709832   4494.449450   \nstd                  0.200121          6.824647      24.857649   3638.815725   \nmin                  0.000000          0.000000       0.000000     50.000000   \n25%                  0.000000          0.000000       1.000000   1600.000000   \n50%                  0.000000          0.000000       7.000000   3000.000000   \n75%                  0.222222          4.000000      17.000000   6500.000000   \nmax                  1.500000        123.000000     358.000000  30000.000000   \n\n           PAYMENTS  MINIMUM_PAYMENTS  PRC_FULL_PAYMENT       TENURE  \ncount   8950.000000       8637.000000       8950.000000  8950.000000  \nmean    1733.143852        864.206542          0.153715    11.517318  \nstd     2895.063757       2372.446607          0.292499     1.338331  \nmin        0.000000          0.019163          0.000000     6.000000  \n25%      383.276166        169.123707          0.000000    12.000000  \n50%      856.901546        312.343947          0.000000    12.000000  \n75%     1901.134317        825.485459          0.142857    12.000000  \nmax    50721.483360      76406.207520          1.000000    12.000000  \n```\n:::\n:::\n\n\nA brief description of your dataset including its provenance, dimensions, etc. as well as the reason why you chose this dataset.\n\n## Why we chose this dataset\n\nWe chose this credit card dataset from Kaggle because it contains detailed information about nearly 9,000 credit card users. It includes data such as their spending habits, payment frequency, and cash advances. This makes it a good dataset for identifying different types of customers and detecting unusual behavior. Additionally, we can use it to predict customers who might stop using their cards or switch to other providers, assess the risk of issuing credit cards to customers, and identify opportunities for targeted offers and credit limit increases.\n\n## Aim \n\nOur group is working on a project titled \"Behavioral Outlier Segmentation,\" which involves analyzing credit card usage data from Kaggle to identify unusual customer behavior patterns. The primary goal of this project is to uncover customer segments that behave similarly but exhibit patterns that deviate from typical usage. These unusual behaviors may include excessive use of cash advances, irregular payment activity, abnormally high or low spending, or infrequent use of the credit card. Additionally, we aim to predict customers who may stop using their cards and switch to competitors.\n\n\nMake sure to load the data and use inline code for some of this information.\n\nThis dataset has `{{ credit_card.shape[0] }}` rows and `{{ credit_card.shape[1] }}` columns.\n\n## Questions\n\nThe two questions you want to answer.\n\n1. We identify clusters of credit card customers based on their transaction behavior (recency, frequency, and monetary value) to detect atypical patterns and classify customers into risk levels (high, medium, low). \n\n2. We predict which customers might stop using their credit cards or switch to a competitor.\n\n## Dataset Overview\n\nName: Credit Card Dataset \nSource: https://www.kaggle.com/datasets/arjunbhasin2013/ccdata\nSize: 8950 instances of customer credit card details\n\n\n## Analysis plan\n\n-   A plan for answering each of the questions including the variables involved, variables to be created (if any), external data to be merged in (if any).\n\nWe will use a type of machine learning called clustering to group customers who have similar spending and payment habits. This method helps us find clear groups of customers who behave alike. It also helps us spot customers who donâ€™t fit into any group. \n\nFor the second part of our project, we want to predict which customers might stop using their credit cards or switch to a different company. To do this, we will use prediction models that learn data about customer behavior.\n\n| Question                | Variables Used                                                                                                     |\n|-------------------------|--------------------------------------------------------------------------------------------------------------------|\n|  Clustering             | BALANCE, BALANCE_FREQUENCY, PURCHASES, ONEOFF_PURCHASES, INSTALLMENTS_PURCHASES, CASH_ADVANCE, PURCHASES_FREQUENCY |\n|  Prediction             | TENURE, BALANCE, BALANCE_FREQUENCY, PURCHASES_FREQUENCY, PAYMENTS, MINIMUM_PAYMENTS, PRCFULLPAYMENT, CASH_ADVANCE  |\n\n## Data Dictionary\n\n| Variable                       | Description |\n|--------------------------------|-------------|\n| CUST_ID                        | Identification of Credit Card holder |\n| BALANCE                        | Balance amount left in their account to make purchases |\n| BALANCE_FREQUENCY              | How frequently the Balance is updated, score between 0 and 1 (1 = frequently updated, 0 = not frequently updated) |\n| PURCHASES                      | Amount of purchases made from account |\n| ONEOFF_PURCHASES               | Maximum purchase amount done in one-go |\n| INSTALLMENTS_PURCHASES         | Amount of purchase done in installment |\n| CASH_ADVANCE                   | Cash in advance given by the user |\n| PURCHASES_FREQUENCY            | How frequently the Purchases are being made, score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased) |\n| ONEOFFPURCHASESFREQUENCY       | How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased) |\n| PURCHASESINSTALLMENTSFREQUENCY | How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done) |\n| CASHADVANCEFREQUENCY           | How frequently the cash in advance is being paid |\n| CASHADVANCETRX                 | Number of Transactions made with \"Cash in Advanced\" |\n| PURCHASES_TRX                  | Number of purchase transactions made |\n| CREDIT_LIMIT                   | Limit of Credit Card for user |\n| PAYMENTS                       | Amount of Payment done by user |\n| MINIMUM_PAYMENTS               | Minimum amount of payments made by user |\n| PRCFULLPAYMENT                 | Percent of full payment paid by user |\n| TENURE                         | Tenure of credit card service for user |\n\n\n## Plan of Attack\n\n| Week   | Dates          | Activity                                                                                                   | Status |\n|--------|--------------- |------------------------------------------------------------------------------------------------------------|--------|\n| Week 2 | 25 July 2025   | â€¢ Review the Dataset and finalize the team<br>â€¢ Select data mining techniques and clustering methods       | Completed |\n| Week 3 | 1 August 2025  | â€¢ Proposal and Peer Review with other teams<br>â€¢ Data Preprocessing                                        | In Progress |\n| Week 4 | 8 August 2025  | â€¢ Perform feature engineering/selection<br>â€¢ Transform and scale features<br>â€¢ Apply clustering algorithms | Not Completed |\n| Week 5 | 15 August 2025 | â€¢ Evaluate clustering performance<br>â€¢ Visualize our results                                               | Not Completed |\n| Week 6 | 20 August 2025 | â€¢ Conduct a peer code review<br>â€¢ Present projects and turn in final write-up                              | Not Completed |\n\n",
    "supporting": [
      "proposal_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}